1. What does the following code snippet do (or what happen to x and y after the two assignment statements? Briefly explain the algorithm.
    double x = 3.2, y = 5.8;
    x = x + y;
    y = x - y;
    x = x - y;
Answer: The above code snippet effectively swaps the values of x and y WITHOUT using a third variable



2. Run the program step-by-step using F11 key (step into) and explain the code.

// This is an example of nested recursion (recursion inside recursion)
using System;
class CSC180Quiz
{
    // recursive method printRow prints n characters of # on one line
    static void printRow(int n)
    {
        if (n < 1)
            return;
        Console.Write("#");
        printRow(n - 1);
    }
    
    // recursive method printPattern prints n rows of string pattern generated by recursive method printRow
    static void printPattern(int n)
    {
        if (n < 1)
            return;
        printRow(n);
        Console.WriteLine();
        printPattern(n - 1);
    }
    public static void Main()
    {
        printPattern(5);
    }
}



3. Describe the program below.
Answer: The DoSomething method displays a string in reverse order.

using System;
public class Program
{
    public static void DoSomething(string str)
    {
        int i = str.Length - 1;
        while (i >= 0)
        {
            Console.Write($"{str[i]} ");
            i--;
        }
        Console.Write("\n");
    }
    public static void Main()
    {
        DoSomething("abcba");
    }
}



4. Extra credit
1. A word is said to be a "doubloon" if every letter that appears in the word appears exactly twice. 
For example, the following are all the doubloons:
    Abba, Anna, appall, appearer, appeases, arraigning, beriberi, bilabial, boob,
    Caucasus, coco, Dada, deed, Emmett, Hannah, horseshoer, intestines, Isis,
    mama, Mimi, murmur, noon, Otto, papa, peep, reappear, redder, sees, Shanghaiings, Toto
Write a method called IsDoubloon that returns true if the given word is a doubloon and false、  otherwise.
Hints: a relatively simple but inefficient method is to use nested loops with the outer loop iterating over 、
each letter and the inner loop scanning all the letters to count the number of appearances of a letter.


// Sample solution #1 - using brute fource (nested loops)!
using System;
namespace CSC180Quiz01
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine(IsDoubloon("asasb"));
            Console.WriteLine(IsDoubloon("asas"));
        }
        static bool IsDoubloon(string word)
        {
	    // if the length of string is not even, rule it out!
            if (word.Length % 2 == 1)
            {
                return false;
            }
	    
            int count = 0;
            for (int i = 0; i < word.Length; i++)
            {
                count = 0;
                for (int j = 0; j < word.Length; j++)
                {
		    // does not count self when i and j are equal
                    if (word[j] == word[i] && i != j)
                    {
                        count++;
                    }
                }
                if (count != 1)
                {
                    return false;
                }
            }
            return true;
        }
    }
}



// Sample solution #2 - a slight variance of #1 brute fource (nested loops)!
using System;
namespace CSC180Quiz01
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine(IsDoubloon("asasb"));
            Console.WriteLine(IsDoubloon("aacbbc"));
        }
        static bool IsDoubloon(string word)
        {
            // if the length of string is not even, rule it out!
            if (word.Length % 2 == 1)
            {
                return false;
            }

            int count = 0;
            for (int i = 0; i < word.Length; i++)
            {
                count = 0;
                for (int j = 0; j < word.Length; j++)
                {
                    if (word[j] == word[i])
                    {
                        count++; // count the number of appearances of any letter
                    }
                }
                if (count != 2)
                {
                    return false;
                }
            }
            return true;
        }
    }
}
