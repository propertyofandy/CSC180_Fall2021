/*
 * CSC180 Week04 Programming Assignment
 * Exercise 5.2. page 56-57
 */

using System;

namespace CSC180Week04
{
    class Program
    {
        public static double Yikes(double x)
        {
            double a, b, c;
            a = x;
            b = Math.Exp(-x);
            c = Math.Sqrt((1 - Math.Exp(-x)));
            return Multadd(a, b, c);
        }
        public static double Multadd(double a, double b, double c)
        {
            return a * b + c;
        }
        static void Main(string[] args)
        {
            // test trigonometric formula
            double a, b, c;
            a = 1 / 2.0;
            b = Math.Cos(Math.PI / 4);
            c = Math.Sin(Math.PI / 4);
            Console.WriteLine("Trigonometric formula result: {0:0.00}", Multadd(a, b, c));
            // test logarithmic formula
            a = 1;
            b = Math.Log(10);
            c = Math.Log(20);
            Console.WriteLine("Logarithmic formula result: {0:0.00}", Multadd(a, b, c));
            // test Yikes method
            Console.WriteLine("Result using Yikes method with x=1: {0:0.00}", Yikes(1));
        }
    }
}



/*
 * CSC180 Week04 Programming Assignment
 * Exercise 5.5. The point of this exercise is to use a stack diagram to understand the
 * execution of a recursive program. (page 58)
 */
 
using System;
public class ProdTest //
{
    public static void Main(string[] args)
    {
        Console.WriteLine(Prod(1, 4));
    }
    public static int Prod(int m, int n)
    {
        if (m == n)
        {
            return n;
        }
        else
        {
            int recurse = Prod(m, n - 1);
            int result = n * recurse;
            return result;
        }
    }
}

/*
 * The method Prod computes the product of m*(m-1)* ... (n-1)*n
 * Stack diagram
 * m=1, n=4, Prod (1,4) ↓                    ↑ 4 * Prod(1,3)  
 * m=1, n=3, Prod (1,3) ↓                    ↑ 3 * Prod(1,2)
 * m=1, n=2, Prod (1,2) ↓                    ↑ 2 * Prod(1,1)
 * m=1, n=1, Prod (1,1) ↓ → → stack bottom → → (returns)
 */



/*
 * CSC180 Week04 Programming Assignment
 * Exercise 5.7. page 59-60
 */
 
using System;
namespace Week04Homework
{
    class Program
    {
        // first: returns the first character of the given string
        public static char First(string s)
        {
            return s[0];
        }
        // rest: returns a new string that contains all but the
        // first letter of the given string
        public static string Rest(string s)
        {
            return s.Substring(1);
        }
        // length: returns the length of the given string
        public static int Length(string s)
        {
            return s.Length;
        }
        public static void WriteString(string s)
        {
            for (int i = 0; i < Length(s); i++)
            {
                Console.WriteLine(s[i]);
            }
        }
        public static void WriteBackward(string s)
        {
            for (int i = Length(s) - 1; i >= 0; i--)
            {
                Console.WriteLine(s[i]);
            }
        }
        public static void WriteBackward2(string s)
        {
            if (Length(s) == 1)
            {
                Console.WriteLine(s);
            }
            else
            {
                WriteBackward2(Rest(s));
                Console.WriteLine(First(s));
            }
        }        
        public static string ReverseString(string s)
        {
            if (Length(s) > 1)
            {
                return ReverseString(Rest(s)) + First(s);
            }
            else
            {
                return s;
            }
        }
            
        static void Main(string[] args)
        {
            string str = "abcdefg";
            Console.WriteLine($"First letter of \"{str}\": {First(str)}");
            Console.WriteLine($"Substring of \"{str}\" except the first letter: {Rest(str)}");
            Console.WriteLine($"Length of \"{str}\": {Length(str)}");
            Console.WriteLine($"\nPrint the letters of \"{str}\", one on each line:");
            WriteString(str);
            Console.WriteLine($"\nPrint \"{str}\" backward , one on each line:");
            WriteBackward(str);
            Console.WriteLine($"\nPrint \"{str}\" backward , one on each line, again:");
            WriteBackward2(str);
            string backwards = ReverseString("Allen Downey");
            Console.WriteLine("\nReverse of \"Allen Downey\":");
            Console.WriteLine(backwards);
        }
    }
}
